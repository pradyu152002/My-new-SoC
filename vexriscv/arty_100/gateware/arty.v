//--------------------------------------------------------------------------------
// Auto-generated by Migen (9a37a58) & LiteX (afbac26e) on 2022-06-30 19:38:42
//--------------------------------------------------------------------------------
module arty(
	input wire cpu_reset,
	(* dont_touch = "true" *)	input wire clk100,
	output reg serial_tx,
	input wire serial_rx,
	output reg spi_clk,
	output reg spi_cs_n,
	output reg spi_mosi,
	input wire spi_miso,
	inout wire i2c_scl,
	inout wire i2c_sda,
	input wire i2c_scl_pup,
	input wire i2c_sda_pup
);

wire rst;
wire sys_clk;
wire sys_rst;
wire idelay_clk;
wire idelay_rst;
wire reset;
wire locked;
wire clkin;
wire clkout0;
wire clkout_buf0;
wire clkout1;
wire clkout_buf1;
reg [3:0] reset_counter = 4'd15;
reg ic_reset = 1'd1;
reg soccontroller_reset_storage = 1'd0;
reg soccontroller_reset_re = 1'd0;
reg [31:0] soccontroller_scratch_storage = 32'd305419896;
reg soccontroller_scratch_re = 1'd0;
wire [31:0] soccontroller_bus_errors_status;
wire soccontroller_bus_errors_we;
reg soccontroller_bus_errors_re = 1'd0;
wire soccontroller_reset;
wire soccontroller_bus_error;
reg [31:0] soccontroller_bus_errors = 32'd0;
wire cpu_reset_1;
reg [31:0] cpu_interrupt = 32'd0;
wire [29:0] cpu_ibus_adr;
wire [31:0] cpu_ibus_dat_w;
wire [31:0] cpu_ibus_dat_r;
wire [3:0] cpu_ibus_sel;
wire cpu_ibus_cyc;
wire cpu_ibus_stb;
wire cpu_ibus_ack;
wire cpu_ibus_we;
wire [2:0] cpu_ibus_cti;
wire [1:0] cpu_ibus_bte;
wire cpu_ibus_err;
wire [29:0] cpu_dbus_adr;
wire [31:0] cpu_dbus_dat_w;
wire [31:0] cpu_dbus_dat_r;
wire [3:0] cpu_dbus_sel;
wire cpu_dbus_cyc;
wire cpu_dbus_stb;
wire cpu_dbus_ack;
wire cpu_dbus_we;
wire [2:0] cpu_dbus_cti;
wire [1:0] cpu_dbus_bte;
wire cpu_dbus_err;
reg [31:0] vexriscv = 32'd0;
wire [29:0] basesoc_ram_bus_adr;
wire [31:0] basesoc_ram_bus_dat_w;
wire [31:0] basesoc_ram_bus_dat_r;
wire [3:0] basesoc_ram_bus_sel;
wire basesoc_ram_bus_cyc;
wire basesoc_ram_bus_stb;
reg basesoc_ram_bus_ack = 1'd0;
wire basesoc_ram_bus_we;
wire [2:0] basesoc_ram_bus_cti;
wire [1:0] basesoc_ram_bus_bte;
reg basesoc_ram_bus_err = 1'd0;
wire [12:0] basesoc_adr;
wire [31:0] basesoc_dat_r;
wire [29:0] ram_bus_ram_bus_adr;
wire [31:0] ram_bus_ram_bus_dat_w;
wire [31:0] ram_bus_ram_bus_dat_r;
wire [3:0] ram_bus_ram_bus_sel;
wire ram_bus_ram_bus_cyc;
wire ram_bus_ram_bus_stb;
reg ram_bus_ram_bus_ack = 1'd0;
wire ram_bus_ram_bus_we;
wire [2:0] ram_bus_ram_bus_cti;
wire [1:0] ram_bus_ram_bus_bte;
reg ram_bus_ram_bus_err = 1'd0;
wire [10:0] ram_adr;
wire [31:0] ram_dat_r;
reg [3:0] ram_we = 4'd0;
wire [31:0] ram_dat_w;
reg [31:0] uart_phy_storage = 32'd4947802;
reg uart_phy_re = 1'd0;
wire uart_phy_sink_valid;
reg uart_phy_sink_ready = 1'd0;
wire uart_phy_sink_first;
wire uart_phy_sink_last;
wire [7:0] uart_phy_sink_payload_data;
reg uart_phy_tx_clken = 1'd0;
reg [31:0] uart_phy_tx_clkphase = 32'd0;
reg [7:0] uart_phy_tx_reg = 8'd0;
reg [3:0] uart_phy_tx_bitcount = 4'd0;
reg uart_phy_tx_busy = 1'd0;
reg uart_phy_source_valid = 1'd0;
wire uart_phy_source_ready;
reg uart_phy_source_first = 1'd0;
reg uart_phy_source_last = 1'd0;
reg [7:0] uart_phy_source_payload_data = 8'd0;
reg uart_phy_rx_clken = 1'd0;
reg [31:0] uart_phy_rx_clkphase = 32'd0;
wire uart_phy_rx;
reg uart_phy_rx_r = 1'd0;
reg [7:0] uart_phy_rx_reg = 8'd0;
reg [3:0] uart_phy_rx_bitcount = 4'd0;
reg uart_phy_rx_busy = 1'd0;
wire uart_rxtx_re;
wire [7:0] uart_rxtx_r;
wire uart_rxtx_we;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_old_trigger = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_old_trigger = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg uart_pending_re = 1'd0;
reg [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg [1:0] uart_enable_storage = 2'd0;
reg uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg uart_reset = 1'd0;
reg [31:0] timer_load_storage = 32'd0;
reg timer_load_re = 1'd0;
reg [31:0] timer_reload_storage = 32'd0;
reg timer_reload_re = 1'd0;
reg timer_en_storage = 1'd0;
reg timer_en_re = 1'd0;
reg timer_update_value_storage = 1'd0;
reg timer_update_value_re = 1'd0;
reg [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg timer_zero_clear = 1'd0;
reg timer_zero_old_trigger = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg timer_pending_re = 1'd0;
reg timer_pending_r = 1'd0;
wire timer_zero2;
reg timer_enable_storage = 1'd0;
reg timer_enable_re = 1'd0;
reg [31:0] timer_value = 32'd0;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg ram_bus_err = 1'd0;
wire [14:0] adr;
wire [31:0] dat_r;
reg [3:0] we = 4'd0;
wire [31:0] dat_w;
wire start0;
wire [7:0] length0;
reg done0 = 1'd0;
reg irq = 1'd0;
wire [31:0] mosi;
reg [31:0] miso = 32'd0;
wire cs;
wire loopback;
reg [15:0] clk_divider0 = 16'd100;
reg start1 = 1'd0;
wire [7:0] length1;
reg [15:0] control_storage = 16'd0;
reg control_re = 1'd0;
wire done1;
wire status_status;
wire status_we;
reg status_re = 1'd0;
reg [31:0] mosi_storage = 32'd0;
reg mosi_re = 1'd0;
wire [31:0] miso_status;
wire miso_we;
reg miso_re = 1'd0;
wire sel;
reg cs_storage = 1'd1;
reg cs_re = 1'd0;
reg loopback_storage = 1'd0;
reg loopback_re = 1'd0;
reg clk_enable = 1'd0;
reg cs_enable = 1'd0;
reg [4:0] count = 5'd0;
reg mosi_latch = 1'd0;
reg miso_latch = 1'd0;
reg [15:0] clk_divider1 = 16'd0;
wire clk_rise;
wire clk_fall;
reg [31:0] mosi_data = 32'd0;
reg [4:0] mosi_sel = 5'd0;
reg [31:0] miso_data = 32'd0;
wire scl;
wire oe;
wire sda0;
reg [2:0] _w_storage = 3'd0;
reg _w_re = 1'd0;
wire sda1;
wire _r_status;
wire _r_we;
reg _r_re = 1'd0;
wire subfragments_reset0;
wire subfragments_reset1;
wire subfragments_reset2;
wire subfragments_reset3;
wire subfragments_reset4;
wire subfragments_reset5;
wire subfragments_reset6;
wire subfragments_reset7;
wire subfragments_pll_fb;
reg [1:0] subfragments_state = 2'd0;
reg [1:0] subfragments_next_state = 2'd0;
reg [4:0] count_next_value = 5'd0;
reg count_next_value_ce = 1'd0;
reg [13:0] basesoc_basesoc_adr = 14'd0;
reg basesoc_basesoc_we = 1'd0;
reg [31:0] basesoc_basesoc_dat_w = 32'd0;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_basesoc_wishbone_adr;
wire [31:0] basesoc_basesoc_wishbone_dat_w;
reg [31:0] basesoc_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_basesoc_wishbone_sel;
wire basesoc_basesoc_wishbone_cyc;
wire basesoc_basesoc_wishbone_stb;
reg basesoc_basesoc_wishbone_ack = 1'd0;
wire basesoc_basesoc_wishbone_we;
wire [2:0] basesoc_basesoc_wishbone_cti;
wire [1:0] basesoc_basesoc_wishbone_bte;
reg basesoc_basesoc_wishbone_err = 1'd0;
wire [29:0] basesoc_shared_adr;
wire [31:0] basesoc_shared_dat_w;
reg [31:0] basesoc_shared_dat_r = 32'd0;
wire [3:0] basesoc_shared_sel;
wire basesoc_shared_cyc;
wire basesoc_shared_stb;
reg basesoc_shared_ack = 1'd0;
wire basesoc_shared_we;
wire [2:0] basesoc_shared_cti;
wire [1:0] basesoc_shared_bte;
wire basesoc_shared_err;
wire [1:0] basesoc_request;
reg basesoc_grant = 1'd0;
reg [3:0] basesoc_slave_sel = 4'd0;
reg [3:0] basesoc_slave_sel_r = 4'd0;
reg basesoc_error = 1'd0;
wire basesoc_wait;
wire basesoc_done;
reg [19:0] basesoc_count = 20'd1000000;
wire [13:0] basesoc_csr_bankarray_interface0_bank_bus_adr;
wire basesoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank0_reset0_re;
wire basesoc_csr_bankarray_csrbank0_reset0_r;
wire basesoc_csr_bankarray_csrbank0_reset0_we;
wire basesoc_csr_bankarray_csrbank0_reset0_w;
wire basesoc_csr_bankarray_csrbank0_scratch0_re;
wire [31:0] basesoc_csr_bankarray_csrbank0_scratch0_r;
wire basesoc_csr_bankarray_csrbank0_scratch0_we;
wire [31:0] basesoc_csr_bankarray_csrbank0_scratch0_w;
wire basesoc_csr_bankarray_csrbank0_bus_errors_re;
wire [31:0] basesoc_csr_bankarray_csrbank0_bus_errors_r;
wire basesoc_csr_bankarray_csrbank0_bus_errors_we;
wire [31:0] basesoc_csr_bankarray_csrbank0_bus_errors_w;
wire basesoc_csr_bankarray_csrbank0_sel;
wire [13:0] basesoc_csr_bankarray_interface1_bank_bus_adr;
wire basesoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank1_w0_re;
wire [2:0] basesoc_csr_bankarray_csrbank1_w0_r;
wire basesoc_csr_bankarray_csrbank1_w0_we;
wire [2:0] basesoc_csr_bankarray_csrbank1_w0_w;
wire basesoc_csr_bankarray_csrbank1_r_re;
wire basesoc_csr_bankarray_csrbank1_r_r;
wire basesoc_csr_bankarray_csrbank1_r_we;
wire basesoc_csr_bankarray_csrbank1_r_w;
wire basesoc_csr_bankarray_csrbank1_sel;
wire [13:0] basesoc_csr_bankarray_sram_bus_adr;
wire basesoc_csr_bankarray_sram_bus_we;
wire [31:0] basesoc_csr_bankarray_sram_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] basesoc_csr_bankarray_adr;
wire [7:0] basesoc_csr_bankarray_dat_r;
wire basesoc_csr_bankarray_sel;
reg basesoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] basesoc_csr_bankarray_interface2_bank_bus_adr;
wire basesoc_csr_bankarray_interface2_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank2_control0_re;
wire [15:0] basesoc_csr_bankarray_csrbank2_control0_r;
wire basesoc_csr_bankarray_csrbank2_control0_we;
wire [15:0] basesoc_csr_bankarray_csrbank2_control0_w;
wire basesoc_csr_bankarray_csrbank2_status_re;
wire basesoc_csr_bankarray_csrbank2_status_r;
wire basesoc_csr_bankarray_csrbank2_status_we;
wire basesoc_csr_bankarray_csrbank2_status_w;
wire basesoc_csr_bankarray_csrbank2_mosi0_re;
wire [31:0] basesoc_csr_bankarray_csrbank2_mosi0_r;
wire basesoc_csr_bankarray_csrbank2_mosi0_we;
wire [31:0] basesoc_csr_bankarray_csrbank2_mosi0_w;
wire basesoc_csr_bankarray_csrbank2_miso_re;
wire [31:0] basesoc_csr_bankarray_csrbank2_miso_r;
wire basesoc_csr_bankarray_csrbank2_miso_we;
wire [31:0] basesoc_csr_bankarray_csrbank2_miso_w;
wire basesoc_csr_bankarray_csrbank2_cs0_re;
wire basesoc_csr_bankarray_csrbank2_cs0_r;
wire basesoc_csr_bankarray_csrbank2_cs0_we;
wire basesoc_csr_bankarray_csrbank2_cs0_w;
wire basesoc_csr_bankarray_csrbank2_loopback0_re;
wire basesoc_csr_bankarray_csrbank2_loopback0_r;
wire basesoc_csr_bankarray_csrbank2_loopback0_we;
wire basesoc_csr_bankarray_csrbank2_loopback0_w;
wire basesoc_csr_bankarray_csrbank2_sel;
wire [13:0] basesoc_csr_bankarray_interface3_bank_bus_adr;
wire basesoc_csr_bankarray_interface3_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank3_load0_re;
wire [31:0] basesoc_csr_bankarray_csrbank3_load0_r;
wire basesoc_csr_bankarray_csrbank3_load0_we;
wire [31:0] basesoc_csr_bankarray_csrbank3_load0_w;
wire basesoc_csr_bankarray_csrbank3_reload0_re;
wire [31:0] basesoc_csr_bankarray_csrbank3_reload0_r;
wire basesoc_csr_bankarray_csrbank3_reload0_we;
wire [31:0] basesoc_csr_bankarray_csrbank3_reload0_w;
wire basesoc_csr_bankarray_csrbank3_en0_re;
wire basesoc_csr_bankarray_csrbank3_en0_r;
wire basesoc_csr_bankarray_csrbank3_en0_we;
wire basesoc_csr_bankarray_csrbank3_en0_w;
wire basesoc_csr_bankarray_csrbank3_update_value0_re;
wire basesoc_csr_bankarray_csrbank3_update_value0_r;
wire basesoc_csr_bankarray_csrbank3_update_value0_we;
wire basesoc_csr_bankarray_csrbank3_update_value0_w;
wire basesoc_csr_bankarray_csrbank3_value_re;
wire [31:0] basesoc_csr_bankarray_csrbank3_value_r;
wire basesoc_csr_bankarray_csrbank3_value_we;
wire [31:0] basesoc_csr_bankarray_csrbank3_value_w;
wire basesoc_csr_bankarray_csrbank3_ev_status_re;
wire basesoc_csr_bankarray_csrbank3_ev_status_r;
wire basesoc_csr_bankarray_csrbank3_ev_status_we;
wire basesoc_csr_bankarray_csrbank3_ev_status_w;
wire basesoc_csr_bankarray_csrbank3_ev_pending_re;
wire basesoc_csr_bankarray_csrbank3_ev_pending_r;
wire basesoc_csr_bankarray_csrbank3_ev_pending_we;
wire basesoc_csr_bankarray_csrbank3_ev_pending_w;
wire basesoc_csr_bankarray_csrbank3_ev_enable0_re;
wire basesoc_csr_bankarray_csrbank3_ev_enable0_r;
wire basesoc_csr_bankarray_csrbank3_ev_enable0_we;
wire basesoc_csr_bankarray_csrbank3_ev_enable0_w;
wire basesoc_csr_bankarray_csrbank3_sel;
wire [13:0] basesoc_csr_bankarray_interface4_bank_bus_adr;
wire basesoc_csr_bankarray_interface4_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank4_txfull_re;
wire basesoc_csr_bankarray_csrbank4_txfull_r;
wire basesoc_csr_bankarray_csrbank4_txfull_we;
wire basesoc_csr_bankarray_csrbank4_txfull_w;
wire basesoc_csr_bankarray_csrbank4_rxempty_re;
wire basesoc_csr_bankarray_csrbank4_rxempty_r;
wire basesoc_csr_bankarray_csrbank4_rxempty_we;
wire basesoc_csr_bankarray_csrbank4_rxempty_w;
wire basesoc_csr_bankarray_csrbank4_ev_status_re;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_status_r;
wire basesoc_csr_bankarray_csrbank4_ev_status_we;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_status_w;
wire basesoc_csr_bankarray_csrbank4_ev_pending_re;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_pending_r;
wire basesoc_csr_bankarray_csrbank4_ev_pending_we;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_pending_w;
wire basesoc_csr_bankarray_csrbank4_ev_enable0_re;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_enable0_r;
wire basesoc_csr_bankarray_csrbank4_ev_enable0_we;
wire [1:0] basesoc_csr_bankarray_csrbank4_ev_enable0_w;
wire basesoc_csr_bankarray_csrbank4_txempty_re;
wire basesoc_csr_bankarray_csrbank4_txempty_r;
wire basesoc_csr_bankarray_csrbank4_txempty_we;
wire basesoc_csr_bankarray_csrbank4_txempty_w;
wire basesoc_csr_bankarray_csrbank4_rxfull_re;
wire basesoc_csr_bankarray_csrbank4_rxfull_r;
wire basesoc_csr_bankarray_csrbank4_rxfull_we;
wire basesoc_csr_bankarray_csrbank4_rxfull_w;
wire basesoc_csr_bankarray_csrbank4_sel;
wire [13:0] basesoc_csr_bankarray_interface5_bank_bus_adr;
wire basesoc_csr_bankarray_interface5_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface5_bank_bus_dat_w;
reg [31:0] basesoc_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire basesoc_csr_bankarray_csrbank5_tuning_word0_re;
wire [31:0] basesoc_csr_bankarray_csrbank5_tuning_word0_r;
wire basesoc_csr_bankarray_csrbank5_tuning_word0_we;
wire [31:0] basesoc_csr_bankarray_csrbank5_tuning_word0_w;
wire basesoc_csr_bankarray_csrbank5_sel;
wire [13:0] basesoc_csr_interconnect_adr;
wire basesoc_csr_interconnect_we;
wire [31:0] basesoc_csr_interconnect_dat_w;
wire [31:0] basesoc_csr_interconnect_dat_r;
reg basesoc_state = 1'd0;
reg basesoc_next_state = 1'd0;
reg [29:0] comb_array_muxed0 = 30'd0;
reg [31:0] comb_array_muxed1 = 32'd0;
reg [3:0] comb_array_muxed2 = 4'd0;
reg comb_array_muxed3 = 1'd0;
reg comb_array_muxed4 = 1'd0;
reg comb_array_muxed5 = 1'd0;
reg [2:0] comb_array_muxed6 = 3'd0;
reg [1:0] comb_array_muxed7 = 2'd0;
reg sync_array_muxed = 1'd0;
wire xilinxasyncresetsynchronizerimpl0;
wire xilinxasyncresetsynchronizerimpl0_rst_meta;
wire xilinxasyncresetsynchronizerimpl1;
wire xilinxasyncresetsynchronizerimpl1_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg regs1 = 1'd0;

assign cpu_reset_1 = soccontroller_reset;
assign rst = soccontroller_reset_re;
assign soccontroller_bus_error = basesoc_error;
always @(*) begin
	cpu_interrupt <= 32'd0;
	cpu_interrupt[1] <= timer_irq;
	cpu_interrupt[0] <= uart_irq;
end
assign reset = ((~cpu_reset) | rst);
assign clkin = clk100;
assign sys_clk = clkout_buf0;
assign idelay_clk = clkout_buf1;
assign soccontroller_reset = soccontroller_reset_re;
assign soccontroller_bus_errors_status = soccontroller_bus_errors;
assign basesoc_adr = basesoc_ram_bus_adr[12:0];
assign basesoc_ram_bus_dat_r = basesoc_dat_r;
always @(*) begin
	ram_we <= 4'd0;
	ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
	ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
	ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
	ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
end
assign ram_adr = ram_bus_ram_bus_adr[10:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
assign uart_uart_sink_valid = uart_phy_source_valid;
assign uart_phy_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = uart_phy_source_first;
assign uart_uart_sink_last = uart_phy_source_last;
assign uart_uart_sink_payload_data = uart_phy_source_payload_data;
assign uart_phy_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = uart_phy_sink_ready;
assign uart_phy_sink_first = uart_uart_source_first;
assign uart_phy_sink_last = uart_uart_source_last;
assign uart_phy_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_tx_trigger = (~uart_tx_fifo_sink_ready);
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rx_trigger = (~uart_rx_fifo_source_valid);
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value != 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
always @(*) begin
	we <= 4'd0;
	we[0] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[0]);
	we[1] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[1]);
	we[2] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[2]);
	we[3] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[3]);
end
assign adr = ram_bus_adr[14:0];
assign ram_bus_dat_r = dat_r;
assign dat_w = ram_bus_dat_w;
assign start0 = start1;
assign length0 = length1;
assign mosi = mosi_storage;
assign done1 = done0;
assign miso_status = miso;
assign cs = cs_storage;
assign loopback = loopback_storage;
assign clk_rise = (clk_divider1 == (clk_divider0[15:1] - 1'd1));
assign clk_fall = (clk_divider1 == (clk_divider0 - 1'd1));
always @(*) begin
	cs_enable <= 1'd0;
	done0 <= 1'd0;
	mosi_latch <= 1'd0;
	irq <= 1'd0;
	miso_latch <= 1'd0;
	subfragments_next_state <= 2'd0;
	count_next_value <= 5'd0;
	count_next_value_ce <= 1'd0;
	clk_enable <= 1'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			count_next_value <= 1'd0;
			count_next_value_ce <= 1'd1;
			if (clk_fall) begin
				cs_enable <= 1'd1;
				subfragments_next_state <= 2'd2;
			end
		end
		2'd2: begin
			clk_enable <= 1'd1;
			cs_enable <= 1'd1;
			if (clk_fall) begin
				count_next_value <= (count + 1'd1);
				count_next_value_ce <= 1'd1;
				if ((count == (length0 - 1'd1))) begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			cs_enable <= 1'd1;
			if (clk_rise) begin
				miso_latch <= 1'd1;
				irq <= 1'd1;
				subfragments_next_state <= 1'd0;
			end
		end
		default: begin
			done0 <= 1'd1;
			if (start0) begin
				done0 <= 1'd0;
				mosi_latch <= 1'd1;
				subfragments_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	basesoc_basesoc_dat_w <= 32'd0;
	basesoc_basesoc_wishbone_dat_r <= 32'd0;
	basesoc_basesoc_wishbone_ack <= 1'd0;
	basesoc_next_state <= 1'd0;
	basesoc_basesoc_adr <= 14'd0;
	basesoc_basesoc_we <= 1'd0;
	basesoc_next_state <= basesoc_state;
	case (basesoc_state)
		1'd1: begin
			basesoc_basesoc_wishbone_ack <= 1'd1;
			basesoc_basesoc_wishbone_dat_r <= basesoc_basesoc_dat_r;
			basesoc_next_state <= 1'd0;
		end
		default: begin
			basesoc_basesoc_dat_w <= basesoc_basesoc_wishbone_dat_w;
			if ((basesoc_basesoc_wishbone_cyc & basesoc_basesoc_wishbone_stb)) begin
				basesoc_basesoc_adr <= basesoc_basesoc_wishbone_adr;
				basesoc_basesoc_we <= (basesoc_basesoc_wishbone_we & (basesoc_basesoc_wishbone_sel != 1'd0));
				basesoc_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_shared_adr = comb_array_muxed0;
assign basesoc_shared_dat_w = comb_array_muxed1;
assign basesoc_shared_sel = comb_array_muxed2;
assign basesoc_shared_cyc = comb_array_muxed3;
assign basesoc_shared_stb = comb_array_muxed4;
assign basesoc_shared_we = comb_array_muxed5;
assign basesoc_shared_cti = comb_array_muxed6;
assign basesoc_shared_bte = comb_array_muxed7;
assign cpu_ibus_dat_r = basesoc_shared_dat_r;
assign cpu_dbus_dat_r = basesoc_shared_dat_r;
assign cpu_ibus_ack = (basesoc_shared_ack & (basesoc_grant == 1'd0));
assign cpu_dbus_ack = (basesoc_shared_ack & (basesoc_grant == 1'd1));
assign cpu_ibus_err = (basesoc_shared_err & (basesoc_grant == 1'd0));
assign cpu_dbus_err = (basesoc_shared_err & (basesoc_grant == 1'd1));
assign basesoc_request = {cpu_dbus_cyc, cpu_ibus_cyc};
always @(*) begin
	basesoc_slave_sel <= 4'd0;
	basesoc_slave_sel[0] <= (basesoc_shared_adr[29:13] == 1'd0);
	basesoc_slave_sel[1] <= (basesoc_shared_adr[29:11] == 12'd2048);
	basesoc_slave_sel[2] <= (basesoc_shared_adr[29:15] == 14'd10240);
	basesoc_slave_sel[3] <= (basesoc_shared_adr[29:14] == 16'd33280);
end
assign basesoc_ram_bus_adr = basesoc_shared_adr;
assign basesoc_ram_bus_dat_w = basesoc_shared_dat_w;
assign basesoc_ram_bus_sel = basesoc_shared_sel;
assign basesoc_ram_bus_stb = basesoc_shared_stb;
assign basesoc_ram_bus_we = basesoc_shared_we;
assign basesoc_ram_bus_cti = basesoc_shared_cti;
assign basesoc_ram_bus_bte = basesoc_shared_bte;
assign ram_bus_ram_bus_adr = basesoc_shared_adr;
assign ram_bus_ram_bus_dat_w = basesoc_shared_dat_w;
assign ram_bus_ram_bus_sel = basesoc_shared_sel;
assign ram_bus_ram_bus_stb = basesoc_shared_stb;
assign ram_bus_ram_bus_we = basesoc_shared_we;
assign ram_bus_ram_bus_cti = basesoc_shared_cti;
assign ram_bus_ram_bus_bte = basesoc_shared_bte;
assign ram_bus_adr = basesoc_shared_adr;
assign ram_bus_dat_w = basesoc_shared_dat_w;
assign ram_bus_sel = basesoc_shared_sel;
assign ram_bus_stb = basesoc_shared_stb;
assign ram_bus_we = basesoc_shared_we;
assign ram_bus_cti = basesoc_shared_cti;
assign ram_bus_bte = basesoc_shared_bte;
assign basesoc_basesoc_wishbone_adr = basesoc_shared_adr;
assign basesoc_basesoc_wishbone_dat_w = basesoc_shared_dat_w;
assign basesoc_basesoc_wishbone_sel = basesoc_shared_sel;
assign basesoc_basesoc_wishbone_stb = basesoc_shared_stb;
assign basesoc_basesoc_wishbone_we = basesoc_shared_we;
assign basesoc_basesoc_wishbone_cti = basesoc_shared_cti;
assign basesoc_basesoc_wishbone_bte = basesoc_shared_bte;
assign basesoc_ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[0]);
assign ram_bus_ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[1]);
assign ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[2]);
assign basesoc_basesoc_wishbone_cyc = (basesoc_shared_cyc & basesoc_slave_sel[3]);
assign basesoc_shared_err = (((basesoc_ram_bus_err | ram_bus_ram_bus_err) | ram_bus_err) | basesoc_basesoc_wishbone_err);
assign basesoc_wait = ((basesoc_shared_stb & basesoc_shared_cyc) & (~basesoc_shared_ack));
always @(*) begin
	basesoc_shared_ack <= 1'd0;
	basesoc_error <= 1'd0;
	basesoc_shared_dat_r <= 32'd0;
	basesoc_shared_ack <= (((basesoc_ram_bus_ack | ram_bus_ram_bus_ack) | ram_bus_ack) | basesoc_basesoc_wishbone_ack);
	basesoc_shared_dat_r <= (((({32{basesoc_slave_sel_r[0]}} & basesoc_ram_bus_dat_r) | ({32{basesoc_slave_sel_r[1]}} & ram_bus_ram_bus_dat_r)) | ({32{basesoc_slave_sel_r[2]}} & ram_bus_dat_r)) | ({32{basesoc_slave_sel_r[3]}} & basesoc_basesoc_wishbone_dat_r));
	if (basesoc_done) begin
		basesoc_shared_dat_r <= 32'd4294967295;
		basesoc_shared_ack <= 1'd1;
		basesoc_error <= 1'd1;
	end
end
assign basesoc_done = (basesoc_count == 1'd0);
assign basesoc_csr_bankarray_csrbank0_sel = (basesoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign basesoc_csr_bankarray_csrbank0_reset0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank0_reset0_re = ((basesoc_csr_bankarray_csrbank0_sel & basesoc_csr_bankarray_interface0_bank_bus_we) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank0_reset0_we = ((basesoc_csr_bankarray_csrbank0_sel & (~basesoc_csr_bankarray_interface0_bank_bus_we)) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank0_scratch0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank0_scratch0_re = ((basesoc_csr_bankarray_csrbank0_sel & basesoc_csr_bankarray_interface0_bank_bus_we) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank0_scratch0_we = ((basesoc_csr_bankarray_csrbank0_sel & (~basesoc_csr_bankarray_interface0_bank_bus_we)) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank0_bus_errors_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank0_bus_errors_re = ((basesoc_csr_bankarray_csrbank0_sel & basesoc_csr_bankarray_interface0_bank_bus_we) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank0_bus_errors_we = ((basesoc_csr_bankarray_csrbank0_sel & (~basesoc_csr_bankarray_interface0_bank_bus_we)) & (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank0_reset0_w = soccontroller_reset_storage;
assign basesoc_csr_bankarray_csrbank0_scratch0_w = soccontroller_scratch_storage[31:0];
assign basesoc_csr_bankarray_csrbank0_bus_errors_w = soccontroller_bus_errors_status[31:0];
assign soccontroller_bus_errors_we = basesoc_csr_bankarray_csrbank0_bus_errors_we;
assign basesoc_csr_bankarray_csrbank1_sel = (basesoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 4'd8);
assign basesoc_csr_bankarray_csrbank1_w0_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[2:0];
assign basesoc_csr_bankarray_csrbank1_w0_re = ((basesoc_csr_bankarray_csrbank1_sel & basesoc_csr_bankarray_interface1_bank_bus_we) & (basesoc_csr_bankarray_interface1_bank_bus_adr[0] == 1'd0));
assign basesoc_csr_bankarray_csrbank1_w0_we = ((basesoc_csr_bankarray_csrbank1_sel & (~basesoc_csr_bankarray_interface1_bank_bus_we)) & (basesoc_csr_bankarray_interface1_bank_bus_adr[0] == 1'd0));
assign basesoc_csr_bankarray_csrbank1_r_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank1_r_re = ((basesoc_csr_bankarray_csrbank1_sel & basesoc_csr_bankarray_interface1_bank_bus_we) & (basesoc_csr_bankarray_interface1_bank_bus_adr[0] == 1'd1));
assign basesoc_csr_bankarray_csrbank1_r_we = ((basesoc_csr_bankarray_csrbank1_sel & (~basesoc_csr_bankarray_interface1_bank_bus_we)) & (basesoc_csr_bankarray_interface1_bank_bus_adr[0] == 1'd1));
assign scl = _w_storage[0];
assign oe = _w_storage[1];
assign sda0 = _w_storage[2];
assign basesoc_csr_bankarray_csrbank1_w0_w = _w_storage[2:0];
assign _r_status = sda1;
assign basesoc_csr_bankarray_csrbank1_r_w = _r_status;
assign _r_we = basesoc_csr_bankarray_csrbank1_r_we;
assign basesoc_csr_bankarray_sel = (basesoc_csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
	basesoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (basesoc_csr_bankarray_sel_r) begin
		basesoc_csr_bankarray_sram_bus_dat_r <= basesoc_csr_bankarray_dat_r;
	end
end
assign basesoc_csr_bankarray_adr = basesoc_csr_bankarray_sram_bus_adr[5:0];
assign basesoc_csr_bankarray_csrbank2_sel = (basesoc_csr_bankarray_interface2_bank_bus_adr[13:9] == 4'd9);
assign basesoc_csr_bankarray_csrbank2_control0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[15:0];
assign basesoc_csr_bankarray_csrbank2_control0_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank2_control0_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank2_status_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank2_status_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank2_status_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank2_mosi0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank2_mosi0_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank2_mosi0_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank2_miso_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank2_miso_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank2_miso_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank2_cs0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank2_cs0_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank2_cs0_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank2_loopback0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank2_loopback0_re = ((basesoc_csr_bankarray_csrbank2_sel & basesoc_csr_bankarray_interface2_bank_bus_we) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
assign basesoc_csr_bankarray_csrbank2_loopback0_we = ((basesoc_csr_bankarray_csrbank2_sel & (~basesoc_csr_bankarray_interface2_bank_bus_we)) & (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
always @(*) begin
	start1 <= 1'd0;
	if (control_re) begin
		start1 <= control_storage[0];
	end
end
assign length1 = control_storage[15:8];
assign basesoc_csr_bankarray_csrbank2_control0_w = control_storage[15:0];
assign status_status = done1;
assign basesoc_csr_bankarray_csrbank2_status_w = status_status;
assign status_we = basesoc_csr_bankarray_csrbank2_status_we;
assign basesoc_csr_bankarray_csrbank2_mosi0_w = mosi_storage[31:0];
assign basesoc_csr_bankarray_csrbank2_miso_w = miso_status[31:0];
assign miso_we = basesoc_csr_bankarray_csrbank2_miso_we;
assign sel = cs_storage;
assign basesoc_csr_bankarray_csrbank2_cs0_w = cs_storage;
assign basesoc_csr_bankarray_csrbank2_loopback0_w = loopback_storage;
assign basesoc_csr_bankarray_csrbank3_sel = (basesoc_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd5);
assign basesoc_csr_bankarray_csrbank3_load0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank3_load0_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank3_load0_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank3_reload0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank3_reload0_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank3_reload0_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank3_en0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank3_en0_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank3_en0_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank3_update_value0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank3_update_value0_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank3_update_value0_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank3_value_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank3_value_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank3_value_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank3_ev_status_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank3_ev_status_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd5));
assign basesoc_csr_bankarray_csrbank3_ev_status_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd5));
assign basesoc_csr_bankarray_csrbank3_ev_pending_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank3_ev_pending_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd6));
assign basesoc_csr_bankarray_csrbank3_ev_pending_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd6));
assign basesoc_csr_bankarray_csrbank3_ev_enable0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank3_ev_enable0_re = ((basesoc_csr_bankarray_csrbank3_sel & basesoc_csr_bankarray_interface3_bank_bus_we) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd7));
assign basesoc_csr_bankarray_csrbank3_ev_enable0_we = ((basesoc_csr_bankarray_csrbank3_sel & (~basesoc_csr_bankarray_interface3_bank_bus_we)) & (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0] == 3'd7));
assign basesoc_csr_bankarray_csrbank3_load0_w = timer_load_storage[31:0];
assign basesoc_csr_bankarray_csrbank3_reload0_w = timer_reload_storage[31:0];
assign basesoc_csr_bankarray_csrbank3_en0_w = timer_en_storage;
assign basesoc_csr_bankarray_csrbank3_update_value0_w = timer_update_value_storage;
assign basesoc_csr_bankarray_csrbank3_value_w = timer_value_status[31:0];
assign timer_value_we = basesoc_csr_bankarray_csrbank3_value_we;
assign timer_status_status = timer_zero0;
assign basesoc_csr_bankarray_csrbank3_ev_status_w = timer_status_status;
assign timer_status_we = basesoc_csr_bankarray_csrbank3_ev_status_we;
assign timer_pending_status = timer_zero1;
assign basesoc_csr_bankarray_csrbank3_ev_pending_w = timer_pending_status;
assign timer_pending_we = basesoc_csr_bankarray_csrbank3_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign basesoc_csr_bankarray_csrbank3_ev_enable0_w = timer_enable_storage;
assign basesoc_csr_bankarray_csrbank4_sel = (basesoc_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd4);
assign uart_rxtx_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[7:0];
assign uart_rxtx_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign uart_rxtx_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign basesoc_csr_bankarray_csrbank4_txfull_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank4_txfull_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank4_txfull_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign basesoc_csr_bankarray_csrbank4_rxempty_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank4_rxempty_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank4_rxempty_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign basesoc_csr_bankarray_csrbank4_ev_status_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign basesoc_csr_bankarray_csrbank4_ev_status_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank4_ev_status_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign basesoc_csr_bankarray_csrbank4_ev_pending_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign basesoc_csr_bankarray_csrbank4_ev_pending_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank4_ev_pending_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign basesoc_csr_bankarray_csrbank4_ev_enable0_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign basesoc_csr_bankarray_csrbank4_ev_enable0_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign basesoc_csr_bankarray_csrbank4_ev_enable0_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign basesoc_csr_bankarray_csrbank4_txempty_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank4_txempty_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd6));
assign basesoc_csr_bankarray_csrbank4_txempty_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd6));
assign basesoc_csr_bankarray_csrbank4_rxfull_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[0];
assign basesoc_csr_bankarray_csrbank4_rxfull_re = ((basesoc_csr_bankarray_csrbank4_sel & basesoc_csr_bankarray_interface4_bank_bus_we) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd7));
assign basesoc_csr_bankarray_csrbank4_rxfull_we = ((basesoc_csr_bankarray_csrbank4_sel & (~basesoc_csr_bankarray_interface4_bank_bus_we)) & (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd7));
assign basesoc_csr_bankarray_csrbank4_txfull_w = uart_txfull_status;
assign uart_txfull_we = basesoc_csr_bankarray_csrbank4_txfull_we;
assign basesoc_csr_bankarray_csrbank4_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = basesoc_csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign basesoc_csr_bankarray_csrbank4_ev_status_w = uart_status_status[1:0];
assign uart_status_we = basesoc_csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign basesoc_csr_bankarray_csrbank4_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = basesoc_csr_bankarray_csrbank4_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign basesoc_csr_bankarray_csrbank4_ev_enable0_w = uart_enable_storage[1:0];
assign basesoc_csr_bankarray_csrbank4_txempty_w = uart_txempty_status;
assign uart_txempty_we = basesoc_csr_bankarray_csrbank4_txempty_we;
assign basesoc_csr_bankarray_csrbank4_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = basesoc_csr_bankarray_csrbank4_rxfull_we;
assign basesoc_csr_bankarray_csrbank5_sel = (basesoc_csr_bankarray_interface5_bank_bus_adr[13:9] == 2'd3);
assign basesoc_csr_bankarray_csrbank5_tuning_word0_r = basesoc_csr_bankarray_interface5_bank_bus_dat_w[31:0];
assign basesoc_csr_bankarray_csrbank5_tuning_word0_re = ((basesoc_csr_bankarray_csrbank5_sel & basesoc_csr_bankarray_interface5_bank_bus_we) & (basesoc_csr_bankarray_interface5_bank_bus_adr[0] == 1'd0));
assign basesoc_csr_bankarray_csrbank5_tuning_word0_we = ((basesoc_csr_bankarray_csrbank5_sel & (~basesoc_csr_bankarray_interface5_bank_bus_we)) & (basesoc_csr_bankarray_interface5_bank_bus_adr[0] == 1'd0));
assign basesoc_csr_bankarray_csrbank5_tuning_word0_w = uart_phy_storage[31:0];
assign basesoc_csr_interconnect_adr = basesoc_basesoc_adr;
assign basesoc_csr_interconnect_we = basesoc_basesoc_we;
assign basesoc_csr_interconnect_dat_w = basesoc_basesoc_dat_w;
assign basesoc_basesoc_dat_r = basesoc_csr_interconnect_dat_r;
assign basesoc_csr_bankarray_interface0_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface1_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface2_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface3_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface4_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface5_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_sram_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface0_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface1_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface2_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface3_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface4_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface5_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_sram_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface0_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface1_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface2_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface3_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface4_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface5_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_sram_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_interconnect_dat_r = ((((((basesoc_csr_bankarray_interface0_bank_bus_dat_r | basesoc_csr_bankarray_interface1_bank_bus_dat_r) | basesoc_csr_bankarray_interface2_bank_bus_dat_r) | basesoc_csr_bankarray_interface3_bank_bus_dat_r) | basesoc_csr_bankarray_interface4_bank_bus_dat_r) | basesoc_csr_bankarray_interface5_bank_bus_dat_r) | basesoc_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	comb_array_muxed0 <= 30'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed0 <= cpu_ibus_adr;
		end
		default: begin
			comb_array_muxed0 <= cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	comb_array_muxed1 <= 32'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed1 <= cpu_ibus_dat_w;
		end
		default: begin
			comb_array_muxed1 <= cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	comb_array_muxed2 <= 4'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed2 <= cpu_ibus_sel;
		end
		default: begin
			comb_array_muxed2 <= cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	comb_array_muxed3 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed3 <= cpu_ibus_cyc;
		end
		default: begin
			comb_array_muxed3 <= cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	comb_array_muxed4 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed4 <= cpu_ibus_stb;
		end
		default: begin
			comb_array_muxed4 <= cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	comb_array_muxed5 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed5 <= cpu_ibus_we;
		end
		default: begin
			comb_array_muxed5 <= cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	comb_array_muxed6 <= 3'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed6 <= cpu_ibus_cti;
		end
		default: begin
			comb_array_muxed6 <= cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	comb_array_muxed7 <= 2'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed7 <= cpu_ibus_bte;
		end
		default: begin
			comb_array_muxed7 <= cpu_dbus_bte;
		end
	endcase
end
always @(*) begin
	sync_array_muxed <= 1'd0;
	case (mosi_sel)
		1'd0: begin
			sync_array_muxed <= mosi_data[0];
		end
		1'd1: begin
			sync_array_muxed <= mosi_data[1];
		end
		2'd2: begin
			sync_array_muxed <= mosi_data[2];
		end
		2'd3: begin
			sync_array_muxed <= mosi_data[3];
		end
		3'd4: begin
			sync_array_muxed <= mosi_data[4];
		end
		3'd5: begin
			sync_array_muxed <= mosi_data[5];
		end
		3'd6: begin
			sync_array_muxed <= mosi_data[6];
		end
		3'd7: begin
			sync_array_muxed <= mosi_data[7];
		end
		4'd8: begin
			sync_array_muxed <= mosi_data[8];
		end
		4'd9: begin
			sync_array_muxed <= mosi_data[9];
		end
		4'd10: begin
			sync_array_muxed <= mosi_data[10];
		end
		4'd11: begin
			sync_array_muxed <= mosi_data[11];
		end
		4'd12: begin
			sync_array_muxed <= mosi_data[12];
		end
		4'd13: begin
			sync_array_muxed <= mosi_data[13];
		end
		4'd14: begin
			sync_array_muxed <= mosi_data[14];
		end
		4'd15: begin
			sync_array_muxed <= mosi_data[15];
		end
		5'd16: begin
			sync_array_muxed <= mosi_data[16];
		end
		5'd17: begin
			sync_array_muxed <= mosi_data[17];
		end
		5'd18: begin
			sync_array_muxed <= mosi_data[18];
		end
		5'd19: begin
			sync_array_muxed <= mosi_data[19];
		end
		5'd20: begin
			sync_array_muxed <= mosi_data[20];
		end
		5'd21: begin
			sync_array_muxed <= mosi_data[21];
		end
		5'd22: begin
			sync_array_muxed <= mosi_data[22];
		end
		5'd23: begin
			sync_array_muxed <= mosi_data[23];
		end
		5'd24: begin
			sync_array_muxed <= mosi_data[24];
		end
		5'd25: begin
			sync_array_muxed <= mosi_data[25];
		end
		5'd26: begin
			sync_array_muxed <= mosi_data[26];
		end
		5'd27: begin
			sync_array_muxed <= mosi_data[27];
		end
		5'd28: begin
			sync_array_muxed <= mosi_data[28];
		end
		5'd29: begin
			sync_array_muxed <= mosi_data[29];
		end
		5'd30: begin
			sync_array_muxed <= mosi_data[30];
		end
		default: begin
			sync_array_muxed <= mosi_data[31];
		end
	endcase
end
assign xilinxasyncresetsynchronizerimpl0 = (~locked);
assign xilinxasyncresetsynchronizerimpl1 = (~locked);
assign uart_phy_rx = regs1;

always @(posedge idelay_clk) begin
	if ((reset_counter != 1'd0)) begin
		reset_counter <= (reset_counter - 1'd1);
	end else begin
		ic_reset <= 1'd0;
	end
	if (idelay_rst) begin
		reset_counter <= 4'd15;
		ic_reset <= 1'd1;
	end
end

always @(posedge sys_clk) begin
	if ((soccontroller_bus_errors != 32'd4294967295)) begin
		if (soccontroller_bus_error) begin
			soccontroller_bus_errors <= (soccontroller_bus_errors + 1'd1);
		end
	end
	basesoc_ram_bus_ack <= 1'd0;
	if (((basesoc_ram_bus_cyc & basesoc_ram_bus_stb) & (~basesoc_ram_bus_ack))) begin
		basesoc_ram_bus_ack <= 1'd1;
	end
	ram_bus_ram_bus_ack <= 1'd0;
	if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & (~ram_bus_ram_bus_ack))) begin
		ram_bus_ram_bus_ack <= 1'd1;
	end
	uart_phy_sink_ready <= 1'd0;
	if (((uart_phy_sink_valid & (~uart_phy_tx_busy)) & (~uart_phy_sink_ready))) begin
		uart_phy_tx_reg <= uart_phy_sink_payload_data;
		uart_phy_tx_bitcount <= 1'd0;
		uart_phy_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((uart_phy_tx_clken & uart_phy_tx_busy)) begin
			uart_phy_tx_bitcount <= (uart_phy_tx_bitcount + 1'd1);
			if ((uart_phy_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((uart_phy_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					uart_phy_tx_busy <= 1'd0;
					uart_phy_sink_ready <= 1'd1;
				end else begin
					serial_tx <= uart_phy_tx_reg[0];
					uart_phy_tx_reg <= {1'd0, uart_phy_tx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_tx_busy) begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= (uart_phy_tx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= uart_phy_storage;
	end
	uart_phy_source_valid <= 1'd0;
	uart_phy_rx_r <= uart_phy_rx;
	if ((~uart_phy_rx_busy)) begin
		if (((~uart_phy_rx) & uart_phy_rx_r)) begin
			uart_phy_rx_busy <= 1'd1;
			uart_phy_rx_bitcount <= 1'd0;
		end
	end else begin
		if (uart_phy_rx_clken) begin
			uart_phy_rx_bitcount <= (uart_phy_rx_bitcount + 1'd1);
			if ((uart_phy_rx_bitcount == 1'd0)) begin
				if (uart_phy_rx) begin
					uart_phy_rx_busy <= 1'd0;
				end
			end else begin
				if ((uart_phy_rx_bitcount == 4'd9)) begin
					uart_phy_rx_busy <= 1'd0;
					if (uart_phy_rx) begin
						uart_phy_source_payload_data <= uart_phy_rx_reg;
						uart_phy_source_valid <= 1'd1;
					end
				end else begin
					uart_phy_rx_reg <= {uart_phy_rx, uart_phy_rx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_rx_busy) begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= (uart_phy_rx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= 32'd2147483648;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_old_trigger <= uart_tx_trigger;
	if (((~uart_tx_trigger) & uart_tx_old_trigger)) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_old_trigger <= uart_rx_trigger;
	if (((~uart_rx_trigger) & uart_rx_old_trigger)) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (uart_reset) begin
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_old_trigger <= timer_zero_trigger;
	if (((~timer_zero_trigger) & timer_zero_old_trigger)) begin
		timer_zero_pending <= 1'd1;
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	clk_divider1 <= (clk_divider1 + 1'd1);
	if (clk_rise) begin
		spi_clk <= clk_enable;
	end else begin
		if (clk_fall) begin
			clk_divider1 <= 1'd0;
			spi_clk <= 1'd0;
		end
	end
	spi_cs_n <= ((~cs) | (~cs_enable));
	if (mosi_latch) begin
		mosi_data <= mosi;
		mosi_sel <= 5'd31;
	end else begin
		if (clk_fall) begin
			if (cs_enable) begin
				spi_mosi <= sync_array_muxed;
			end
			mosi_sel <= (mosi_sel - 1'd1);
		end
	end
	if (clk_rise) begin
		if (loopback) begin
			miso_data <= {miso_data, spi_mosi};
		end else begin
			miso_data <= {miso_data, spi_miso};
		end
	end
	if (miso_latch) begin
		miso <= miso_data;
	end
	subfragments_state <= subfragments_next_state;
	if (count_next_value_ce) begin
		count <= count_next_value;
	end
	basesoc_state <= basesoc_next_state;
	case (basesoc_grant)
		1'd0: begin
			if ((~basesoc_request[0])) begin
				if (basesoc_request[1]) begin
					basesoc_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~basesoc_request[1])) begin
				if (basesoc_request[0]) begin
					basesoc_grant <= 1'd0;
				end
			end
		end
	endcase
	basesoc_slave_sel_r <= basesoc_slave_sel;
	if (basesoc_wait) begin
		if ((~basesoc_done)) begin
			basesoc_count <= (basesoc_count - 1'd1);
		end
	end else begin
		basesoc_count <= 20'd1000000;
	end
	basesoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank0_sel) begin
		case (basesoc_csr_bankarray_interface0_bank_bus_adr[1:0])
			1'd0: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank0_reset0_re) begin
		soccontroller_reset_storage <= basesoc_csr_bankarray_csrbank0_reset0_r;
	end
	soccontroller_reset_re <= basesoc_csr_bankarray_csrbank0_reset0_re;
	if (basesoc_csr_bankarray_csrbank0_scratch0_re) begin
		soccontroller_scratch_storage[31:0] <= basesoc_csr_bankarray_csrbank0_scratch0_r;
	end
	soccontroller_scratch_re <= basesoc_csr_bankarray_csrbank0_scratch0_re;
	soccontroller_bus_errors_re <= basesoc_csr_bankarray_csrbank0_bus_errors_re;
	basesoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank1_sel) begin
		case (basesoc_csr_bankarray_interface1_bank_bus_adr[0])
			1'd0: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_w0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_r_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank1_w0_re) begin
		_w_storage[2:0] <= basesoc_csr_bankarray_csrbank1_w0_r;
	end
	_w_re <= basesoc_csr_bankarray_csrbank1_w0_re;
	_r_re <= basesoc_csr_bankarray_csrbank1_r_re;
	basesoc_csr_bankarray_sel_r <= basesoc_csr_bankarray_sel;
	basesoc_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank2_sel) begin
		case (basesoc_csr_bankarray_interface2_bank_bus_adr[2:0])
			1'd0: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_control0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_status_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_mosi0_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_miso_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_cs0_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_loopback0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank2_control0_re) begin
		control_storage[15:0] <= basesoc_csr_bankarray_csrbank2_control0_r;
	end
	control_re <= basesoc_csr_bankarray_csrbank2_control0_re;
	status_re <= basesoc_csr_bankarray_csrbank2_status_re;
	if (basesoc_csr_bankarray_csrbank2_mosi0_re) begin
		mosi_storage[31:0] <= basesoc_csr_bankarray_csrbank2_mosi0_r;
	end
	mosi_re <= basesoc_csr_bankarray_csrbank2_mosi0_re;
	miso_re <= basesoc_csr_bankarray_csrbank2_miso_re;
	if (basesoc_csr_bankarray_csrbank2_cs0_re) begin
		cs_storage <= basesoc_csr_bankarray_csrbank2_cs0_r;
	end
	cs_re <= basesoc_csr_bankarray_csrbank2_cs0_re;
	if (basesoc_csr_bankarray_csrbank2_loopback0_re) begin
		loopback_storage <= basesoc_csr_bankarray_csrbank2_loopback0_r;
	end
	loopback_re <= basesoc_csr_bankarray_csrbank2_loopback0_re;
	basesoc_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank3_sel) begin
		case (basesoc_csr_bankarray_interface3_bank_bus_adr[2:0])
			1'd0: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_load0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_reload0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_en0_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_update_value0_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_value_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_ev_status_w;
			end
			3'd6: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_ev_pending_w;
			end
			3'd7: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_ev_enable0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank3_load0_re) begin
		timer_load_storage[31:0] <= basesoc_csr_bankarray_csrbank3_load0_r;
	end
	timer_load_re <= basesoc_csr_bankarray_csrbank3_load0_re;
	if (basesoc_csr_bankarray_csrbank3_reload0_re) begin
		timer_reload_storage[31:0] <= basesoc_csr_bankarray_csrbank3_reload0_r;
	end
	timer_reload_re <= basesoc_csr_bankarray_csrbank3_reload0_re;
	if (basesoc_csr_bankarray_csrbank3_en0_re) begin
		timer_en_storage <= basesoc_csr_bankarray_csrbank3_en0_r;
	end
	timer_en_re <= basesoc_csr_bankarray_csrbank3_en0_re;
	if (basesoc_csr_bankarray_csrbank3_update_value0_re) begin
		timer_update_value_storage <= basesoc_csr_bankarray_csrbank3_update_value0_r;
	end
	timer_update_value_re <= basesoc_csr_bankarray_csrbank3_update_value0_re;
	timer_value_re <= basesoc_csr_bankarray_csrbank3_value_re;
	timer_status_re <= basesoc_csr_bankarray_csrbank3_ev_status_re;
	if (basesoc_csr_bankarray_csrbank3_ev_pending_re) begin
		timer_pending_r <= basesoc_csr_bankarray_csrbank3_ev_pending_r;
	end
	timer_pending_re <= basesoc_csr_bankarray_csrbank3_ev_pending_re;
	if (basesoc_csr_bankarray_csrbank3_ev_enable0_re) begin
		timer_enable_storage <= basesoc_csr_bankarray_csrbank3_ev_enable0_r;
	end
	timer_enable_re <= basesoc_csr_bankarray_csrbank3_ev_enable0_re;
	basesoc_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank4_sel) begin
		case (basesoc_csr_bankarray_interface4_bank_bus_adr[2:0])
			1'd0: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_txfull_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_rxempty_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_ev_status_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_ev_pending_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_ev_enable0_w;
			end
			3'd6: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_txempty_w;
			end
			3'd7: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= basesoc_csr_bankarray_csrbank4_txfull_re;
	uart_rxempty_re <= basesoc_csr_bankarray_csrbank4_rxempty_re;
	uart_status_re <= basesoc_csr_bankarray_csrbank4_ev_status_re;
	if (basesoc_csr_bankarray_csrbank4_ev_pending_re) begin
		uart_pending_r[1:0] <= basesoc_csr_bankarray_csrbank4_ev_pending_r;
	end
	uart_pending_re <= basesoc_csr_bankarray_csrbank4_ev_pending_re;
	if (basesoc_csr_bankarray_csrbank4_ev_enable0_re) begin
		uart_enable_storage[1:0] <= basesoc_csr_bankarray_csrbank4_ev_enable0_r;
	end
	uart_enable_re <= basesoc_csr_bankarray_csrbank4_ev_enable0_re;
	uart_txempty_re <= basesoc_csr_bankarray_csrbank4_txempty_re;
	uart_rxfull_re <= basesoc_csr_bankarray_csrbank4_rxfull_re;
	basesoc_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank5_sel) begin
		case (basesoc_csr_bankarray_interface5_bank_bus_adr[0])
			1'd0: begin
				basesoc_csr_bankarray_interface5_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank5_tuning_word0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank5_tuning_word0_re) begin
		uart_phy_storage[31:0] <= basesoc_csr_bankarray_csrbank5_tuning_word0_r;
	end
	uart_phy_re <= basesoc_csr_bankarray_csrbank5_tuning_word0_re;
	if (sys_rst) begin
		soccontroller_reset_storage <= 1'd0;
		soccontroller_reset_re <= 1'd0;
		soccontroller_scratch_storage <= 32'd305419896;
		soccontroller_scratch_re <= 1'd0;
		soccontroller_bus_errors_re <= 1'd0;
		soccontroller_bus_errors <= 32'd0;
		basesoc_ram_bus_ack <= 1'd0;
		ram_bus_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		uart_phy_storage <= 32'd4947802;
		uart_phy_re <= 1'd0;
		uart_phy_sink_ready <= 1'd0;
		uart_phy_tx_clken <= 1'd0;
		uart_phy_tx_busy <= 1'd0;
		uart_phy_source_valid <= 1'd0;
		uart_phy_source_payload_data <= 8'd0;
		uart_phy_rx_clken <= 1'd0;
		uart_phy_rx_r <= 1'd0;
		uart_phy_rx_busy <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_old_trigger <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		ram_bus_ack <= 1'd0;
		spi_clk <= 1'd0;
		spi_cs_n <= 1'd0;
		spi_mosi <= 1'd0;
		miso <= 32'd0;
		control_storage <= 16'd0;
		control_re <= 1'd0;
		status_re <= 1'd0;
		mosi_re <= 1'd0;
		miso_re <= 1'd0;
		cs_storage <= 1'd1;
		cs_re <= 1'd0;
		loopback_storage <= 1'd0;
		loopback_re <= 1'd0;
		count <= 5'd0;
		clk_divider1 <= 16'd0;
		mosi_data <= 32'd0;
		mosi_sel <= 5'd0;
		miso_data <= 32'd0;
		_w_storage <= 3'd0;
		_w_re <= 1'd0;
		_r_re <= 1'd0;
		subfragments_state <= 2'd0;
		basesoc_grant <= 1'd0;
		basesoc_slave_sel_r <= 4'd0;
		basesoc_count <= 20'd1000000;
		basesoc_csr_bankarray_sel_r <= 1'd0;
		basesoc_state <= 1'd0;
	end
	regs0 <= serial_rx;
	regs1 <= regs0;
end

BUFG BUFG(
	.I(clkout0),
	.O(clkout_buf0)
);

BUFG BUFG_1(
	.I(clkout1),
	.O(clkout_buf1)
);

IDELAYCTRL IDELAYCTRL(
	.REFCLK(idelay_clk),
	.RST(ic_reset)
);

reg [31:0] mem[0:8191];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[basesoc_adr];
end

assign basesoc_dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (ram_we[0])
		mem_1[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		mem_1[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		mem_1[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		mem_1[ram_adr][31:24] <= ram_dat_w[31:24];
	memadr <= ram_adr;
end

assign ram_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [7:0] mem_2[0:40];
reg [5:0] memadr_1;
always @(posedge sys_clk) begin
	memadr_1 <= basesoc_csr_bankarray_adr;
end

assign basesoc_csr_bankarray_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_2 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_1;
assign uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_3;
assign uart_rx_fifo_rdport_dat_r = memdat_4;

reg [31:0] mem_3[0:32767];
reg [14:0] memadr_2;
always @(posedge sys_clk) begin
	if (we[0])
		mem_3[adr][7:0] <= dat_w[7:0];
	if (we[1])
		mem_3[adr][15:8] <= dat_w[15:8];
	if (we[2])
		mem_3[adr][23:16] <= dat_w[23:16];
	if (we[3])
		mem_3[adr][31:24] <= dat_w[31:24];
	memadr_2 <= adr;
end

assign dat_r = mem_3[memadr_2];

initial begin
	$readmemh("mem_3.init", mem_3);
end

assign i2c_scl = (~scl) ? 1'd0 : 1'bz;

assign i2c_sda = (oe & (~sda0)) ? 1'd0 : 1'bz;
assign sda1 = i2c_sda;

FD FD(
	.C(clkin),
	.D(reset),
	.Q(subfragments_reset0)
);

FD FD_1(
	.C(clkin),
	.D(subfragments_reset0),
	.Q(subfragments_reset1)
);

FD FD_2(
	.C(clkin),
	.D(subfragments_reset1),
	.Q(subfragments_reset2)
);

FD FD_3(
	.C(clkin),
	.D(subfragments_reset2),
	.Q(subfragments_reset3)
);

FD FD_4(
	.C(clkin),
	.D(subfragments_reset3),
	.Q(subfragments_reset4)
);

FD FD_5(
	.C(clkin),
	.D(subfragments_reset4),
	.Q(subfragments_reset5)
);

FD FD_6(
	.C(clkin),
	.D(subfragments_reset5),
	.Q(subfragments_reset6)
);

FD FD_7(
	.C(clkin),
	.D(subfragments_reset6),
	.Q(subfragments_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(5'd16),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(5'd16),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(4'd8),
	.CLKOUT1_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(subfragments_pll_fb),
	.CLKIN1(clkin),
	.RST(subfragments_reset7),
	.CLKFBOUT(subfragments_pll_fb),
	.CLKOUT0(clkout0),
	.CLKOUT1(clkout1),
	.LOCKED(locked)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(cpu_dbus_dat_r),
	.dBusWishbone_ERR(cpu_dbus_err),
	.externalInterruptArray(cpu_interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(cpu_ibus_dat_r),
	.iBusWishbone_ERR(cpu_ibus_err),
	.reset((sys_rst | cpu_reset_1)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(cpu_dbus_adr),
	.dBusWishbone_BTE(cpu_dbus_bte),
	.dBusWishbone_CTI(cpu_dbus_cti),
	.dBusWishbone_CYC(cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(cpu_dbus_dat_w),
	.dBusWishbone_SEL(cpu_dbus_sel),
	.dBusWishbone_STB(cpu_dbus_stb),
	.dBusWishbone_WE(cpu_dbus_we),
	.iBusWishbone_ADR(cpu_ibus_adr),
	.iBusWishbone_BTE(cpu_ibus_bte),
	.iBusWishbone_CTI(cpu_ibus_cti),
	.iBusWishbone_CYC(cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(cpu_ibus_dat_w),
	.iBusWishbone_SEL(cpu_ibus_sel),
	.iBusWishbone_STB(cpu_ibus_stb),
	.iBusWishbone_WE(cpu_ibus_we)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(sys_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(idelay_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(idelay_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(idelay_rst)
);

endmodule
